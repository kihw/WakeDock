#!/bin/bash

# WakeDock - Script de gestion des d√©pendances
# Ce script met √† jour et audite les d√©pendances du projet

set -euo pipefail

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
DASHBOARD_DIR="$PROJECT_ROOT/dashboard"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_npm_audit() {
    log_info "Audit de s√©curit√© NPM..."
    
    if cd "$DASHBOARD_DIR" 2>/dev/null; then
        # Cr√©er un backup de package-lock.json
        if [[ -f "package-lock.json" ]]; then
            cp package-lock.json package-lock.json.backup
        fi
        
        # Afficher l'audit actuel
        log_info "√âtat actuel des vuln√©rabilit√©s:"
        npm audit --audit-level low || true
        
        echo ""
        read -p "Voulez-vous tenter de corriger automatiquement les vuln√©rabilit√©s? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "Tentative de correction automatique..."
            
            # Essayer la correction simple d'abord
            if npm audit fix; then
                log_success "Corrections automatiques appliqu√©es"
            else
                log_warning "La correction automatique a √©chou√©"
                
                echo ""
                read -p "Voulez-vous forcer les corrections (peut casser la compatibilit√©)? (y/N): " -n 1 -r
                echo
                
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    log_warning "Application des corrections forc√©es..."
                    npm audit fix --force || log_error "Les corrections forc√©es ont √©chou√©"
                fi
            fi
            
            # V√©rifier l'√©tat apr√®s correction
            log_info "√âtat apr√®s correction:"
            npm audit --audit-level low || true
        fi
        
        cd "$PROJECT_ROOT"
    else
        log_error "Impossible d'acc√©der au r√©pertoire dashboard"
    fi
}

check_outdated_packages() {
    log_info "V√©rification des packages obsol√®tes..."
    
    if cd "$DASHBOARD_DIR" 2>/dev/null; then
        log_info "Packages NPM obsol√®tes:"
        npm outdated || log_info "Tous les packages sont √† jour"
        
        echo ""
        read -p "Voulez-vous mettre √† jour les packages obsol√®tes? (y/N): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            log_info "Mise √† jour des packages..."
            npm update
            log_success "Packages mis √† jour"
        fi
        
        cd "$PROJECT_ROOT"
    fi
}

check_python_security() {
    log_info "V√©rification des vuln√©rabilit√©s Python..."
    
    # Installer pip-audit si n√©cessaire
    if ! command -v pip-audit >/dev/null 2>&1; then
        log_info "Installation de pip-audit..."
        pip install pip-audit
    fi
    
    # V√©rifier les vuln√©rabilit√©s
    if [[ -f "$PROJECT_ROOT/requirements.txt" ]]; then
        log_info "Audit des d√©pendances Python:"
        pip-audit -r "$PROJECT_ROOT/requirements.txt" || log_warning "Vuln√©rabilit√©s d√©tect√©es"
    fi
    
    if [[ -f "$PROJECT_ROOT/requirements-prod.txt" ]]; then
        log_info "Audit des d√©pendances de production:"
        pip-audit -r "$PROJECT_ROOT/requirements-prod.txt" || log_warning "Vuln√©rabilit√©s d√©tect√©es"
    fi
}

update_node_version() {
    log_info "V√©rification de la version Node.js..."
    
    current_node=$(node --version 2>/dev/null || echo "Non install√©")
    recommended_node="v20.18.0"
    
    log_info "Version actuelle: $current_node"
    log_info "Version recommand√©e: $recommended_node"
    
    if [[ "$current_node" != "$recommended_node" ]]; then
        log_warning "Version Node.js diff√©rente de celle recommand√©e"
        log_info "Utilisez nvm pour installer la version recommand√©e:"
        log_info "  nvm install $recommended_node"
        log_info "  nvm use $recommended_node"
    else
        log_success "Version Node.js correcte"
    fi
}

optimize_package_json() {
    log_info "Optimisation du package.json..."
    
    package_json="$DASHBOARD_DIR/package.json"
    
    if [[ -f "$package_json" ]]; then
        # Cr√©er une sauvegarde
        cp "$package_json" "$package_json.backup"
        
        # V√©rifier et optimiser les scripts
        log_info "Scripts disponibles dans package.json:"
        jq -r '.scripts | keys[]' "$package_json" 2>/dev/null || log_warning "jq non install√©"
        
        # Suggestion d'ajouts de scripts utiles
        log_info "Scripts recommand√©s pour le d√©veloppement:"
        echo "  - security:audit: Audit de s√©curit√© complet"
        echo "  - deps:update: Mise √† jour des d√©pendances"
        echo "  - deps:check: V√©rification des d√©pendances obsol√®tes"
        
        log_success "Optimisation du package.json termin√©e"
    fi
}

generate_dependency_report() {
    log_info "G√©n√©ration du rapport de d√©pendances..."
    
    report_file="$PROJECT_ROOT/dependency_report_$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# Rapport de D√©pendances WakeDock

**Date**: $(date)
**Script**: manage-dependencies.sh

## Environnement

- **Node.js**: $(node --version 2>/dev/null || echo "Non install√©")
- **NPM**: $(npm --version 2>/dev/null || echo "Non install√©")
- **Python**: $(python3 --version 2>/dev/null || echo "Non install√©")
- **pip**: $(pip --version 2>/dev/null || echo "Non install√©")

## D√©pendances Frontend (NPM)

### Audit de S√©curit√©
EOF

    if cd "$DASHBOARD_DIR" 2>/dev/null; then
        echo "$(npm audit --audit-level low 2>&1 || echo 'Audit non disponible')" >> "$report_file"
        cd "$PROJECT_ROOT"
    fi

    cat >> "$report_file" << EOF

### Packages Obsol√®tes
EOF

    if cd "$DASHBOARD_DIR" 2>/dev/null; then
        echo '```' >> "$report_file"
        npm outdated 2>&1 >> "$report_file" || echo "Tous les packages sont √† jour" >> "$report_file"
        echo '```' >> "$report_file"
        cd "$PROJECT_ROOT"
    fi

    cat >> "$report_file" << EOF

## D√©pendances Backend (Python)

### Vuln√©rabilit√©s
EOF

    if command -v pip-audit >/dev/null 2>&1 && [[ -f "$PROJECT_ROOT/requirements.txt" ]]; then
        echo '```' >> "$report_file"
        pip-audit -r "$PROJECT_ROOT/requirements.txt" 2>&1 >> "$report_file" || echo "Audit Python non disponible" >> "$report_file"
        echo '```' >> "$report_file"
    else
        echo "pip-audit non install√© ou requirements.txt non trouv√©" >> "$report_file"
    fi

    cat >> "$report_file" << EOF

## Recommandations

### Actions Imm√©diates
- [ ] Corriger les vuln√©rabilit√©s critiques et hautes
- [ ] Mettre √† jour les packages avec des correctifs de s√©curit√©
- [ ] Tester l'application apr√®s les mises √† jour

### Actions de Maintenance
- [ ] Programmer des audits r√©guliers (hebdomadaires)
- [ ] Mettre en place des alertes de s√©curit√© automatiques
- [ ] Documenter les d√©pendances critiques

### Outils Recommand√©s
- **Snyk**: Monitoring continu des vuln√©rabilit√©s
- **Dependabot**: Mises √† jour automatiques des d√©pendances
- **npm-check-updates**: Gestion avanc√©e des mises √† jour NPM

---

**G√©n√©r√© par**: scripts/manage-dependencies.sh
**Prochaine r√©vision**: $(date -d '+1 week' 2>/dev/null || date)
EOF

    log_success "Rapport g√©n√©r√©: $report_file"
}

main() {
    log_info "D√©marrage de la gestion des d√©pendances WakeDock..."
    
    update_node_version
    check_npm_audit
    check_outdated_packages
    check_python_security
    optimize_package_json
    generate_dependency_report
    
    log_success "üéâ Gestion des d√©pendances termin√©e!"
    log_info "Consultez le rapport g√©n√©r√© pour plus de d√©tails."
    
    # Recommandations finales
    echo ""
    log_info "üîß Actions recommand√©es:"
    echo "  1. Testez l'application apr√®s les mises √† jour"
    echo "  2. Commitez les changements de d√©pendances"
    echo "  3. Programmez des audits r√©guliers"
    echo "  4. Surveillez les alertes de s√©curit√©"
}

# V√©rifier que le script est ex√©cut√© depuis le bon r√©pertoire
if [[ ! -f "$PROJECT_ROOT/pyproject.toml" ]]; then
    log_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet WakeDock"
    exit 1
fi

main "$@"
