#!/usr/bin/env python3
"""
Test de validation finale pour la s√©curit√© WakeDock
Test sans d√©pendances complexes pour v√©rifier l'int√©gration
"""

import sys
import os
import time
from datetime import datetime

def test_security_files_exist():
    """V√©rifie que tous les fichiers de s√©curit√© existent"""
    print("üìÅ Test de pr√©sence des fichiers de s√©curit√©")
    
    security_files = [
        "src/wakedock/security/jwt_rotation.py",
        "src/wakedock/security/session_timeout.py", 
        "src/wakedock/security/intrusion_detection.py",
        "src/wakedock/security/ids_middleware.py",
        "src/wakedock/security/manager.py",
        "src/wakedock/security/config.py"
    ]
    
    missing_files = []
    for file_path in security_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"   ‚ùå Fichiers manquants: {missing_files}")
        return False
    
    print(f"   ‚úÖ Tous les {len(security_files)} fichiers de s√©curit√© sont pr√©sents")
    return True

def test_main_py_integration():
    """V√©rifie que main.py contient les imports de s√©curit√©"""
    print("üîß Test de l'int√©gration dans main.py")
    
    main_py_path = "src/wakedock/main.py"
    
    if not os.path.exists(main_py_path):
        print("   ‚ùå main.py non trouv√©")
        return False
    
    with open(main_py_path, 'r') as f:
        content = f.read()
    
    required_imports = [
        "from wakedock.security.manager import",
        "initialize_security",
        "shutdown_security",
        "IntrusionDetectionMiddleware",
        "SessionTimeoutMiddleware"
    ]
    
    missing_imports = []
    for import_stmt in required_imports:
        if import_stmt not in content:
            missing_imports.append(import_stmt)
    
    if missing_imports:
        print(f"   ‚ùå Imports manquants: {missing_imports}")
        return False
    
    # V√©rifier les points cl√©s d'int√©gration
    integration_points = [
        "security_config =",
        "await initialize_security",
        "app.add_middleware",
        "await shutdown_security"
    ]
    
    missing_integration = []
    for point in integration_points:
        if point not in content:
            missing_integration.append(point)
    
    if missing_integration:
        print(f"   ‚ùå Points d'int√©gration manquants: {missing_integration}")
        return False
    
    print("   ‚úÖ main.py correctement int√©gr√© avec la s√©curit√©")
    return True

def test_auth_routes_security():
    """V√©rifie que les routes d'auth incluent les nouveaux endpoints"""
    print("üõ°Ô∏è  Test des routes d'authentification s√©curis√©es")
    
    auth_routes_path = "src/wakedock/api/auth/routes.py"
    
    if not os.path.exists(auth_routes_path):
        print("   ‚ùå routes.py d'auth non trouv√©")
        return False
    
    with open(auth_routes_path, 'r') as f:
        content = f.read()
    
    security_endpoints = [
        "/refresh",
        "/logout", 
        "/security/events",
        "/security/statistics",
        "/jwt/rotation/stats",
        "/session/stats"
    ]
    
    missing_endpoints = []
    for endpoint in security_endpoints:
        if f'"{endpoint}"' not in content and f"'{endpoint}'" not in content:
            missing_endpoints.append(endpoint)
    
    if missing_endpoints:
        print(f"   ‚ùå Endpoints s√©curit√© manquants: {missing_endpoints}")
        return False
    
    print(f"   ‚úÖ Tous les {len(security_endpoints)} endpoints de s√©curit√© sont pr√©sents")
    return True

def test_security_documentation():
    """V√©rifie que la documentation de s√©curit√© est pr√©sente"""
    print("üìö Test de la documentation s√©curit√©")
    
    docs = [
        "INTEGRATION_SECURITE_GUIDE.md",
        "test_security_features.py",
        "RAPPORT_STATUT_JUILLET_2025.md"
    ]
    
    missing_docs = []
    for doc in docs:
        if not os.path.exists(doc):
            missing_docs.append(doc)
    
    if missing_docs:
        print(f"   ‚ùå Documentation manquante: {missing_docs}")
        return False
    
    print(f"   ‚úÖ Toute la documentation s√©curit√© est pr√©sente")
    return True

def test_code_quality():
    """Test basique de qualit√© du code de s√©curit√©"""
    print("üîç Test de qualit√© du code s√©curit√©")
    
    security_files = [
        "src/wakedock/security/jwt_rotation.py",
        "src/wakedock/security/session_timeout.py",
        "src/wakedock/security/intrusion_detection.py"
    ]
    
    total_lines = 0
    total_files = 0
    
    for file_path in security_files:
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                lines = len(f.readlines())
                total_lines += lines
                total_files += 1
                print(f"   üìÑ {os.path.basename(file_path)}: {lines} lignes")
    
    if total_files == 0:
        print("   ‚ùå Aucun fichier de s√©curit√© trouv√©")
        return False
    
    avg_lines = total_lines / total_files
    print(f"   üìä Moyenne: {avg_lines:.0f} lignes par fichier")
    print(f"   üìä Total: {total_lines} lignes de code s√©curit√©")
    
    if total_lines < 1000:
        print("   ‚ö†Ô∏è  Code de s√©curit√© peut-√™tre incomplet")
        return False
    
    print("   ‚úÖ Volume de code s√©curit√© appropri√©")
    return True

def test_integration_guide():
    """V√©rifie le guide d'int√©gration"""
    print("üìñ Test du guide d'int√©gration")
    
    guide_path = "INTEGRATION_SECURITE_GUIDE.md"
    
    if not os.path.exists(guide_path):
        print("   ‚ùå Guide d'int√©gration manquant")
        return False
    
    with open(guide_path, 'r') as f:
        content = f.read()
    
    required_sections = [
        "√âTAPES D'INT√âGRATION",
        "requirements.txt",
        "main.py",
        "CONFIGURATION PRODUCTION",
        "CHECKLIST DE D√âPLOIEMENT"
    ]
    
    missing_sections = []
    for section in required_sections:
        if section not in content:
            missing_sections.append(section)
    
    if missing_sections:
        print(f"   ‚ùå Sections manquantes: {missing_sections}")
        return False
    
    print("   ‚úÖ Guide d'int√©gration complet")
    return True

def main():
    """Ex√©cute la validation finale"""
    start_time = time.time()
    
    print("üéØ Validation Finale - Int√©gration S√©curit√© WakeDock")
    print("Date:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    print("=" * 60)
    
    tests = [
        ("Fichiers de S√©curit√©", test_security_files_exist),
        ("Int√©gration Main.py", test_main_py_integration),
        ("Routes S√©curis√©es", test_auth_routes_security), 
        ("Documentation", test_security_documentation),
        ("Qualit√© du Code", test_code_quality),
        ("Guide d'Int√©gration", test_integration_guide)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: R√âUSSI")
            else:
                failed += 1
                print(f"‚ùå {test_name}: √âCHOU√â")
        except Exception as e:
            failed += 1
            print(f"‚ùå {test_name}: ERREUR - {e}")
    
    duration = time.time() - start_time
    
    print("\n" + "=" * 60)
    print(f"üìä R√©sultats de la Validation Finale")
    print(f"   Tests R√©ussis: {passed}")
    print(f"   Tests √âchou√©s: {failed}")
    print(f"   Dur√©e: {duration:.2f}s")
    
    if failed == 0:
        print("\nüéâ VALIDATION FINALE R√âUSSIE!")
        print("‚úÖ L'int√©gration s√©curit√© est compl√®te et pr√™te.")
        print("üöÄ WakeDock est maintenant s√©curis√© au niveau enterprise!")
        print("\nüìã PROCHAINES √âTAPES:")
        print("   1. Tester l'application compl√®te")
        print("   2. Configurer les variables d'environnement")
        print("   3. D√©ployer en production")
        return 0
    else:
        print("\n‚ö†Ô∏è  Validation finale √©chou√©e.")
        print("üîß V√©rifiez les points manquants ci-dessus.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
