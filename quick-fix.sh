#!/bin/bash

echo "üöÄ Correction Rapide - WakeDock Authentication Issues"
echo "=================================================="

# 1. Red√©marrer les services avec logs
echo "1. üîÑ Red√©marrage des services avec monitoring"
echo "=============================================="

cd /Docker/code/WakeDock

# Arr√™ter tout
echo "Arr√™t des services..."
docker-compose down

# Nettoyer les volumes probl√©matiques (optionnel)
echo "Nettoyage des caches..."
docker volume prune -f

# Red√©marrer avec logs
echo "Red√©marrage..."
docker-compose up -d

# Attendre que les services soient pr√™ts
echo "Attente du d√©marrage complet..."
sleep 10

# 2. V√©rifier l'√©tat des services
echo ""
echo "2. ‚úÖ V√©rification de l'√©tat des services"
echo "========================================"

echo "√âtat des conteneurs:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "Health checks:"
docker inspect wakedock-core --format='{{.State.Health.Status}}' 2>/dev/null || echo "‚ùå Core health unknown"
docker inspect wakedock-dashboard --format='{{.State.Health.Status}}' 2>/dev/null || echo "‚ùå Dashboard health unknown"

# 3. Test simple de connectivit√©
echo ""
echo "3. üåê Tests de connectivit√© basiques"
echo "=================================="

# Test health endpoint interne
echo "Test health interne:"
timeout 5 docker exec wakedock-core curl -f http://localhost:8000/api/v1/health 2>/dev/null && echo "‚úÖ Core health OK" || echo "‚ùå Core health failed"

# Test via Caddy
echo "Test via Caddy (public):"
timeout 5 curl -f https://admin.mtool.ovh/api/v1/health 2>/dev/null && echo "‚úÖ Public health OK" || echo "‚ùå Public health failed"

# 4. Cr√©er un utilisateur admin si n√©cessaire
echo ""
echo "4. üë§ Cr√©ation utilisateur admin"
echo "==============================="

# Essayer de cr√©er l'admin
echo "Tentative de cr√©ation de l'utilisateur admin..."
timeout 10 docker exec wakedock-core python /app/create_admin_user.py 2>/dev/null && echo "‚úÖ Admin user created/exists" || echo "‚ùå Admin creation failed"

# 5. Test de login simple
echo ""
echo "5. üîë Test de login"
echo "=================="

echo "Test POST login:"
LOGIN_RESPONSE=$(timeout 10 curl -s -X POST "https://admin.mtool.ovh/api/v1/auth/login" \
  -H "Content-Type: application/json" \
  -d '{"username": "admin", "password": "admin"}' 2>/dev/null)

if echo "$LOGIN_RESPONSE" | grep -q "access_token"; then
    echo "‚úÖ Login successful!"
    echo "Response preview: $(echo "$LOGIN_RESPONSE" | head -c 100)..."
else
    echo "‚ùå Login failed"
    echo "Response: $LOGIN_RESPONSE"
fi

# 6. Logs r√©cents
echo ""
echo "6. üìã Logs r√©cents (derni√®res 10 lignes)"
echo "========================================"

echo "Core logs:"
docker logs wakedock-core --tail=10 2>/dev/null || echo "‚ùå Cannot get core logs"

echo ""
echo "Dashboard logs:"
docker logs wakedock-dashboard --tail=5 2>/dev/null || echo "‚ùå Cannot get dashboard logs"

echo ""
echo "Caddy logs:"
docker logs wakedock-caddy --tail=5 2>/dev/null || echo "‚ùå Cannot get caddy logs"

# 7. Instructions pour la suite
echo ""
echo "üéØ R√âSULTATS ET PROCHAINES √âTAPES"
echo "================================="
echo "Temps: $(date)"
echo ""
echo "Si les tests ci-dessus √©chouent:"
echo "1. V√©rifiez les logs complets: docker logs wakedock-core"
echo "2. V√©rifiez la configuration de la base de donn√©es"
echo "3. Testez l'acc√®s direct: docker exec -it wakedock-core bash"
echo "4. Consultez le dashboard √†: https://admin.mtool.ovh"
echo ""
echo "Si les tests r√©ussissent:"
echo "1. Le probl√®me est probablement c√¥t√© frontend"
echo "2. V√©rifiez le Service Worker dans les DevTools"
echo "3. Consultez les erreurs JavaScript dans la console"
