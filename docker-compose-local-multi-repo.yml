services:
  wakedock-backend:
    build:
      context: ./wakedock-backend
      dockerfile: Dockerfile
    container_name: wakedock-core
    restart: ${RESTART_POLICY:-unless-stopped}
    env_file:
      - .env
    ports:
      - "5000:5000"
    volumes:
      - ${DOCKER_SOCKET_PATH:-/var/run/docker.sock}:/var/run/docker.sock
      - ${WAKEDOCK_CONFIG_DIR:-./config}:/app/config
      - wakedock_data:/app/data
      - caddy_config_shared:/etc/caddy:z
    environment:
      - WAKEDOCK_CONFIG_PATH=/app/config/config.yml
      - WAKEDOCK_DATA_PATH=/app/data
      - WAKEDOCK_LOG_LEVEL=${WAKEDOCK_LOG_LEVEL:-INFO}
      - WAKEDOCK_DEBUG=${WAKEDOCK_DEBUG:-false}
      - CADDY_CONFIG_VOLUME_PATH=${CADDY_CONFIG_VOLUME:-/etc/caddy}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-wakedock}:${POSTGRES_PASSWORD:-wakedock123}@postgres:5432/${POSTGRES_DB:-wakedock}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/api/v1/health" ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ${WAKEDOCK_NETWORK:-caddy_net}

  wakedock-frontend:
    build:
      context: ./wakedock-frontend
      dockerfile: Dockerfile
    container_name: wakedock-dashboard
    restart: ${RESTART_POLICY:-unless-stopped}
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - ${DASHBOARD_DATA_DIR:-./data/dashboard}:/app/data
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - WAKEDOCK_API_URL=http://wakedock-backend:5000
      - VITE_API_BASE_URL=/api/v1
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost/api/v1}
      - PUBLIC_WS_URL=/ws
    networks:
      - ${WAKEDOCK_NETWORK:-caddy_net}
    depends_on:
      - wakedock-backend

  caddy:
    image: caddy:2-alpine
    container_name: wakedock-caddy
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "${CADDY_HTTP_PORT:-80}:80"
      - "${CADDY_HTTPS_PORT:-443}:443"
      - "${CADDY_ADMIN_PORT:-2019}:2019"
    volumes:
      - ./caddy/Caddyfile.test:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - CADDY_ADMIN=${CADDY_ADMIN_IP:-0.0.0.0}:${CADDY_ADMIN_PORT:-2019}
      - DOMAIN=${DOMAIN:-localhost}
    networks:
      - ${WAKEDOCK_NETWORK:-caddy_net}
    depends_on:
      - wakedock-backend
      - wakedock-frontend

  # PostgreSQL database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: wakedock-postgres
    restart: ${RESTART_POLICY:-unless-stopped}
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-wakedock}
      - POSTGRES_USER=${POSTGRES_USER:-wakedock}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-wakedock123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports:
    #   - "${POSTGRES_PORT:-5432}:5432"  # Removed for security - PostgreSQL only accessible internally
    networks:
      - ${WAKEDOCK_NETWORK:-caddy_net}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-wakedock} -d ${POSTGRES_DB:-wakedock}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: wakedock-redis
    restart: ${RESTART_POLICY:-unless-stopped}
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    # ports:
    #   - "${REDIS_PORT:-6379}:6379"    # Removed for security - Redis only accessible internally
    networks:
      - ${WAKEDOCK_NETWORK:-caddy_net}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  caddy_net:
    name: ${WAKEDOCK_NETWORK:-caddy_net}
    driver: bridge

volumes:
  wakedock_data:
    driver: local

  postgres_data:
    driver: local

  redis_data:
    driver: local

  caddy_config_shared:
    driver: local

  caddy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_DATA_DIR:-./data/caddy}

  caddy_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_CONFIG_DIR:-./data/caddy-config}

  dashboard_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DASHBOARD_DATA_DIR:-./data/dashboard}
