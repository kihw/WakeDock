services:
  # WakeDock Main Application
  wakedock:
    image: wakedock/wakedock:latest
    container_name: wakedock
    restart: always
    depends_on:
      - postgres
      - redis
    environment:
      - WAKEDOCK_CONFIG_PATH=/app/config/config.yml
      - PYTHONPATH=/app/src
    volumes:
      - ./config/config.yml:/app/config/config.yml:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - wakedock-internal
      - wakedock-external
    labels:
      - "com.docker.compose.service=wakedock"
      - "traefik.enable=true"
      - "traefik.http.routers.wakedock.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.wakedock.tls.certresolver=letsencrypt"
      - "traefik.http.services.wakedock.loadbalancer.server.port=8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dashboard Frontend
  dashboard:
    image: wakedock/dashboard:latest
    container_name: wakedock-dashboard
    restart: always
    environment:
      - VITE_API_URL=https://${DOMAIN}
      - VITE_WS_URL=wss://${DOMAIN}/ws
    networks:
      - wakedock-external
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.services.dashboard.loadbalancer.server.port=80"

  # Reverse Proxy with Caddy
  caddy:
    image: caddy:2-alpine
    container_name: wakedock-caddy
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019" # Admin API
    environment:
      - DOMAIN=${DOMAIN}
      - EMAIL=${EMAIL}
      - CADDY_ADMIN_API_KEY=${CADDY_ADMIN_API_KEY}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./caddy/templates:/etc/caddy/templates:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - wakedock-external
    labels:
      - "com.docker.compose.service=caddy"
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2019/config/" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wakedock-postgres
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - wakedock-internal
    labels:
      - "com.docker.compose.service=postgres"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: wakedock-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - wakedock-internal
    labels:
      - "com.docker.compose.service=redis"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: wakedock-prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION}'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - wakedock-internal
      - wakedock-monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=auth"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: wakedock-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - wakedock-monitoring
      - wakedock-external
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Automated Backup Service
  backup:
    image: wakedock/backup:latest
    container_name: wakedock-backup
    restart: always
    environment:
      - BACKUP_SCHEDULE=0 2 * * * # Daily at 2 AM
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - S3_REGION=${BACKUP_S3_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - NOTIFICATION_EMAIL=${ALERT_EMAIL}
    volumes:
      - ./data:/app/data:ro
      - ./backups:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - wakedock-internal
    depends_on:
      - postgres
      - redis

  # Log Aggregation with Fluent Bit
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: wakedock-fluent-bit
    restart: always
    volumes:
      - ./monitoring/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./logs:/app/logs:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - wakedock-internal
    depends_on:
      - wakedock
  # Traefik Load Balancer (Alternative to Caddy)
  # Uncomment if you prefer Traefik over Caddy
  # traefik:
  #   image: traefik:v2.10
  #   container_name: wakedock-traefik
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080"  # Dashboard
  #   environment:
  #     - TRAEFIK_API_DASHBOARD=true
  #     - TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL=${EMAIL}
  #   volumes:
  #     - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
  #     - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
  #     - traefik_certs:/certs
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #   networks:
  #     - wakedock-external
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
  #     - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
  #     - "traefik.http.routers.traefik.middlewares=auth"

networks:
  wakedock-external:
    driver: bridge
    name: wakedock-external
  wakedock-internal:
    driver: bridge
    name: wakedock-internal
    internal: true
  wakedock-monitoring:
    driver: bridge
    name: wakedock-monitoring
    internal: true

volumes:
  postgres_data:
    driver: local
    name: wakedock-postgres-data
  redis_data:
    driver: local
    name: wakedock-redis-data
  caddy_data:
    driver: local
    name: wakedock-caddy-data
  caddy_config:
    driver: local
    name: wakedock-caddy-config
  prometheus_data:
    driver: local
    name: wakedock-prometheus-data
  grafana_data:
    driver: local
    name: wakedock-grafana-data
  # traefik_certs:
  #   driver: local
  #   name: wakedock-traefik-certs
