---
# Backup operations playbook
- name: Backup WakeDock data
  hosts: wakedock_servers
  become: true
  gather_facts: true
  
  vars:
    backup_timestamp: "{{ ansible_date_time.epoch }}"
    backup_name: "wakedock-backup-{{ backup_timestamp }}"
    
  tasks:
    - name: Create backup directory
      file:
        path: "{{ wakedock_home }}/backups/{{ backup_name }}"
        state: directory
        owner: "{{ wakedock_user }}"
        group: "{{ wakedock_group }}"
        mode: '0755'
        
    - name: Stop WakeDock services for consistent backup
      docker_compose:
        project_src: "{{ wakedock_home }}/wakedock"
        stopped: yes
      become_user: "{{ wakedock_user }}"
      when: backup_consistent | default(false)
      
    - name: Backup database
      docker_compose:
        project_src: "{{ wakedock_home }}/wakedock"
        services: postgresql
        state: present
      become_user: "{{ wakedock_user }}"
      
    - name: Export database
      shell: |
        docker exec $(docker-compose -f {{ wakedock_home }}/wakedock/docker-compose.yml ps -q postgresql) \
        pg_dump -U {{ database_user }} {{ database_name }} > {{ wakedock_home }}/backups/{{ backup_name }}/database.sql
      become_user: "{{ wakedock_user }}"
      
    - name: Backup configuration files
      copy:
        src: "{{ wakedock_home }}/wakedock/"
        dest: "{{ wakedock_home }}/backups/{{ backup_name }}/config/"
        remote_src: yes
        owner: "{{ wakedock_user }}"
        group: "{{ wakedock_group }}"
        
    - name: Backup data volumes
      shell: |
        docker run --rm -v {{ wakedock_home }}/wakedock_data:/data -v {{ wakedock_home }}/backups/{{ backup_name }}:/backup \
        busybox tar czf /backup/data.tar.gz -C /data .
      become_user: "{{ wakedock_user }}"
      
    - name: Restart WakeDock services
      docker_compose:
        project_src: "{{ wakedock_home }}/wakedock"
        state: present
      become_user: "{{ wakedock_user }}"
      when: backup_consistent | default(false)
      
    - name: Create backup archive
      archive:
        path: "{{ wakedock_home }}/backups/{{ backup_name }}"
        dest: "{{ wakedock_home }}/backups/{{ backup_name }}.tar.gz"
        format: gz
        owner: "{{ wakedock_user }}"
        group: "{{ wakedock_group }}"
        
    - name: Remove temporary backup directory
      file:
        path: "{{ wakedock_home }}/backups/{{ backup_name }}"
        state: absent
        
    - name: Upload backup to S3 (if configured)
      aws_s3:
        bucket: "{{ backup_s3_bucket }}"
        object: "wakedock/{{ backup_name }}.tar.gz"
        src: "{{ wakedock_home }}/backups/{{ backup_name }}.tar.gz"
        mode: put
        region: "{{ backup_s3_region }}"
      when: backup_s3_bucket is defined and backup_s3_bucket != ""
      
    - name: Clean up old backups
      find:
        paths: "{{ wakedock_home }}/backups"
        age: "{{ backup_retention_days }}d"
        patterns: "*.tar.gz"
      register: old_backups
      
    - name: Remove old backup files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      
    - name: Display backup information
      debug:
        msg:
          - "Backup completed successfully!"
          - "Backup name: {{ backup_name }}.tar.gz"
          - "Backup location: {{ wakedock_home }}/backups/"
          - "Backup size: {{ (ansible_facts['stat']['size'] / 1024 / 1024) | round(2) }}MB"
