# Production override for docker-compose.yml
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # WakeDock API Service
  wakedock:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
    container_name: wakedock-api
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    environment:
      - ENV=production
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - CADDY_ADMIN_ENDPOINT=http://caddy:2019
      - PYTHONPATH=/app
      - WAKEDOCK_DEBUG=false
      - WAKEDOCK_LOG_LEVEL=${WAKEDOCK_LOG_LEVEL}
      - WAKEDOCK_RELOAD=false
    volumes:
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock:ro
      - ${WAKEDOCK_CORE_DATA}:/app/data
      - ${WAKEDOCK_LOGS_DIR}:/app/logs
    ports:
      - "${WAKEDOCK_CORE_PORT}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ${WAKEDOCK_NETWORK}
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Service  
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.prod
      target: production
    container_name: wakedock-dashboard
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - API_URL=http://wakedock:8000
      - PUBLIC_API_URL=${PUBLIC_API_URL}
    ports:
      - "${DASHBOARD_PORT}:3000"
    depends_on:
      - wakedock
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - ${WAKEDOCK_NETWORK}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wakedock-postgres
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - ${POSTGRES_DATA_DIR}:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ${WAKEDOCK_NETWORK}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wakedock-redis
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    command: >
      redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - ${REDIS_DATA_DIR}:/data
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 20s
    networks:
      - ${WAKEDOCK_NETWORK}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: wakedock-caddy
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - API_UPSTREAM=wakedock:8000
      - DASHBOARD_UPSTREAM=dashboard:3000
    volumes:
      - ./caddy/Caddyfile.prod:/etc/caddy/Caddyfile:ro
      - ${CADDY_DATA_DIR}:/data
      - ${CADDY_CONFIG_DIR}:/config
      - ${CADDY_LOGS_DIR}:/var/log/caddy
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
      - "${CADDY_ADMIN_PORT}:2019"
    depends_on:
      - wakedock
      - dashboard
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2019/config/" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - ${WAKEDOCK_NETWORK}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: wakedock-prometheus
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${PROMETHEUS_DATA_DIR}:/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - ${WAKEDOCK_NETWORK}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: wakedock-grafana
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ${GRAFANA_DATA_DIR}:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT}:3000"
    networks:
      - ${WAKEDOCK_NETWORK}
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

volumes:
  wakedock_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${WAKEDOCK_CORE_DATA}

  wakedock_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${WAKEDOCK_LOGS_DIR}

  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_DIR}

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_DIR}

  caddy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_DATA_DIR}

  caddy_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_CONFIG_DIR}

  caddy_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_LOGS_DIR}

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PROMETHEUS_DATA_DIR}

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${GRAFANA_DATA_DIR}

networks:
  wakedock-network:
    name: ${WAKEDOCK_NETWORK}
    external: true
