version: '3.8'

services:
  # WakeDock API Service
  wakedock:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
    container_name: wakedock-api
    restart: unless-stopped
    environment:
      - ENV=production
      - HOST=0.0.0.0
      - PORT=8000
      - DATABASE_URL=postgresql://wakedock:wakedock@postgres:5432/wakedock
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - CADDY_ADMIN_ENDPOINT=http://caddy:2019
      - PYTHONPATH=/app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - wakedock_data:/app/data
      - wakedock_logs:/app/logs
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wakedock-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Service  
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.prod
      target: production
    container_name: wakedock-dashboard
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - API_URL=http://wakedock:8000
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8000}
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
    depends_on:
      - wakedock
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - wakedock-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wakedock-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=wakedock
      - POSTGRES_USER=wakedock
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-wakedock}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U wakedock -d wakedock" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - wakedock-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wakedock-redis
    restart: unless-stopped
    command: >
      redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-wakedock} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 20s
    networks:
      - wakedock-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: wakedock-caddy
    restart: unless-stopped
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - API_UPSTREAM=wakedock:8000
      - DASHBOARD_UPSTREAM=dashboard:3000
    volumes:
      - ./caddy/Caddyfile.prod:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
      - "${CADDY_ADMIN_PORT:-2019}:2019"
    depends_on:
      - wakedock
      - dashboard
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2019/config/" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - wakedock-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: wakedock-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - wakedock-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: wakedock-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - wakedock-network
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - monitoring

volumes:
  wakedock_data:
    driver: local
  wakedock_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  wakedock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
