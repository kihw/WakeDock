# Docker Compose Production Configuration with Performance Optimizations
# Optimized for production deployment with Redis caching and performance tuning

version: '3.8'

services:
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: wakedock-redis
    restart: unless-stopped
    command: |
      redis-server 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - wakedock-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL with performance optimizations
  postgres:
    image: postgres:15-alpine
    container_name: wakedock-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: wakedock
      POSTGRES_USER: wakedock
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      # PostgreSQL configuration
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_CHECKPOINT_SEGMENTS: 32
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_MAX_CONNECTIONS: 200
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/database/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./src/wakedock/performance/database/migrations_performance.sql:/docker-entrypoint-initdb.d/02-performance.sql
    ports:
      - "5432:5432"
    networks:
      - wakedock-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U wakedock -d wakedock" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: |
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c wal_buffers=16MB
      -c checkpoint_completion_target=0.9
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
      -c log_min_duration_statement=1000
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on

  # Main WakeDock application with optimizations
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        - BUILD_ENV=production
    container_name: wakedock-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configuration
      DATABASE_URL: postgresql://wakedock:${POSTGRES_PASSWORD}@postgres:5432/wakedock
      DATABASE_POOL_SIZE: 25
      DATABASE_MAX_OVERFLOW: 75
      DATABASE_POOL_TIMEOUT: 30
      DATABASE_POOL_RECYCLE: 3600
      DATABASE_POOL_PRE_PING: "true"

      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      REDIS_CACHE_TTL: 300
      REDIS_MAX_CONNECTIONS: 50

      # WebSocket optimization
      WEBSOCKET_BATCH_SIZE: 10
      WEBSOCKET_BATCH_INTERVAL: 100
      WEBSOCKET_MAX_CONNECTIONS: 1000
      WEBSOCKET_COMPRESSION_ENABLED: "true"

      # Performance settings
      PYTHON_ENV: production
      UVICORN_WORKERS: 4
      UVICORN_WORKER_CLASS: uvicorn.workers.UvicornWorker
      UVICORN_MAX_REQUESTS: 10000
      UVICORN_MAX_REQUESTS_JITTER: 1000

      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}

      # Monitoring
      PROMETHEUS_ENABLED: "true"
      METRICS_ENABLED: "true"
      LOG_LEVEL: INFO

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - app_logs:/app/logs
      - app_cache:/app/cache
    ports:
      - "8000:8000"
    networks:
      - wakedock-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend Dashboard with optimizations
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_ENV=production
        - VITE_API_BASE_URL=http://localhost:8000
        - VITE_WS_BASE_URL=ws://localhost:8000
    container_name: wakedock-dashboard
    restart: unless-stopped
    depends_on:
      - app
    ports:
      - "3000:3000"
    networks:
      - wakedock-network
    environment:
      NODE_ENV: production
      PORT: 3000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Caddy reverse proxy with HTTP/2 and compression
  caddy:
    image: caddy:2-alpine
    container_name: wakedock-caddy
    restart: unless-stopped
    depends_on:
      - app
      - dashboard
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019" # Caddy admin API
    volumes:
      - ./caddy/Caddyfile.prod:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - wakedock-network
    environment:
      CADDY_ADMIN_LISTEN: 0.0.0.0:2019
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wakedock-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
    networks:
      - wakedock-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: wakedock-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - wakedock-network
    profiles:
      - monitoring

networks:
  wakedock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_cache:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Performance optimization configurations
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-deploy-resources: &default-resources
  resources:
    limits:
      memory: 1G
    reservations:
      memory: 256M
