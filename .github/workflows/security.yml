name: 🔒 Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  security-events: write
  contents: read

jobs:
  # Code Security Scanning
  code-scan:
    name: 🔍 Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep

    - name: 🔒 Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-results.json
      continue-on-error: true

    - name: 📊 Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results
        path: bandit-results.json

    - name: 🔍 Run Safety vulnerability check
      run: |
        safety check --json --output safety-results.json
      continue-on-error: true

    - name: 📊 Upload Safety results  
      uses: actions/upload-artifact@v3
      with:
        name: safety-results
        path: safety-results.json

    - name: 🔍 Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-results.json src/
      continue-on-error: true

    - name: 📊 Upload Semgrep results
      uses: actions/upload-artifact@v3
      with:
        name: semgrep-results
        path: semgrep-results.json

  # Dependency Scanning
  dependency-scan:
    name: 🔗 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit

    - name: 🔍 Audit Python dependencies
      run: |
        pip-audit --requirement requirements.txt --format=json --output=pip-audit-results.json
      continue-on-error: true

    - name: 📊 Upload pip-audit results
      uses: actions/upload-artifact@v3
      with:
        name: pip-audit-results
        path: pip-audit-results.json

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔍 Audit Node.js dependencies
      working-directory: dashboard
      run: |
        npm audit --audit-level=moderate --json > npm-audit-results.json
      continue-on-error: true

    - name: 📊 Upload npm audit results
      uses: actions/upload-artifact@v3
      with:
        name: npm-audit-results
        path: dashboard/npm-audit-results.json

  # Container Scanning
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build API image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        target: production
        tags: wakedock-api:scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build Dashboard image for scanning
      uses: docker/build-push-action@v5
      with:
        context: dashboard
        file: dashboard/Dockerfile.prod
        target: production
        tags: wakedock-dashboard:scan
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🔍 Scan API image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'wakedock-api:scan'
        format: 'sarif'
        output: 'trivy-api-results.sarif'

    - name: 🔍 Scan Dashboard image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'wakedock-dashboard:scan'
        format: 'sarif'
        output: 'trivy-dashboard-results.sarif'

    - name: 📊 Upload API Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-api-results.sarif'
        category: 'trivy-api'

    - name: 📊 Upload Dashboard Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-dashboard-results.sarif'
        category: 'trivy-dashboard'

  # License Scanning
  license-scan:
    name: 📜 License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install license checker
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses

    - name: 🔍 Check Python licenses
      run: |
        pip install -r requirements.txt
        pip-licenses --format=json --output-file=python-licenses.json

    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install Node.js license checker
      run: |
        npm install -g license-checker

    - name: 🔍 Check Node.js licenses
      working-directory: dashboard
      run: |
        npm ci
        license-checker --json --out ../nodejs-licenses.json

    - name: 📊 Upload license results
      uses: actions/upload-artifact@v3
      with:
        name: license-results
        path: |
          python-licenses.json
          nodejs-licenses.json

  # Secret Scanning
  secret-scan:
    name: 🔐 Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run GitLeaks secret scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # SAST (Static Application Security Testing)
  sast-scan:
    name: 🔬 SAST Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python, javascript

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  # Security Summary
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [code-scan, dependency-scan, container-scan, license-scan, secret-scan, sast-scan]
    if: always()
    
    steps:
    - name: 📊 Generate security summary
      run: |
        echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "- Code Security: ${{ needs.code-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Security: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Container Security: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- License Compliance: ${{ needs.license-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Secret Scanning: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- SAST Analysis: ${{ needs.sast-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.code-scan.result }}" == "failure" || 
              "${{ needs.dependency-scan.result }}" == "failure" || 
              "${{ needs.container-scan.result }}" == "failure" || 
              "${{ needs.secret-scan.result }}" == "failure" || 
              "${{ needs.sast-scan.result }}" == "failure" ]]; then
          echo "⚠️ **Security issues detected!** Please review the scan results." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **All security scans passed!**" >> $GITHUB_STEP_SUMMARY
        fi
