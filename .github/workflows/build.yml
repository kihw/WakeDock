name: 🏗️ Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}-api
  IMAGE_NAME_DASHBOARD: ${{ github.repository }}-dashboard

jobs:
  # Build Docker Images
  build:
    name: 🏗️ Build Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      dashboard-image: ${{ steps.meta-dashboard.outputs.tags }}
      api-digest: ${{ steps.build-api.outputs.digest }}
      dashboard-digest: ${{ steps.build-dashboard.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # API Image
    - name: 📊 Extract API metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push API image
      id: build-api
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Dashboard Image
    - name: 📊 Extract Dashboard metadata
      id: meta-dashboard
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_DASHBOARD }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Dashboard image
      id: build-dashboard
      uses: docker/build-push-action@v5
      with:
        context: dashboard
        file: dashboard/Dockerfile.prod
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-dashboard.outputs.tags }}
        labels: ${{ steps.meta-dashboard.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning of Built Images
  scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    permissions:
      security-events: write
    
    strategy:
      matrix:
        image: [api, dashboard]
    
    steps:
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.image == 'api' && needs.build.outputs.api-image || needs.build.outputs.dashboard-image }}
        format: 'sarif'
        output: 'trivy-${{ matrix.image }}-results.sarif'

    - name: 📊 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.image }}-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.wakedock.example.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup deployment
      run: |
        echo "API_IMAGE=${{ needs.build.outputs.api-image }}" >> $GITHUB_ENV
        echo "DASHBOARD_IMAGE=${{ needs.build.outputs.dashboard-image }}" >> $GITHUB_ENV

    - name: 📋 Generate deployment manifest
      run: |
        envsubst < docker-compose.prod.yml > docker-compose.staging.yml
        cat docker-compose.staging.yml

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "API Image: ${{ env.API_IMAGE }}"
        echo "Dashboard Image: ${{ env.DASHBOARD_IMAGE }}"
        # Here you would add your actual deployment commands
        # Examples:
        # - SSH to staging server and run docker-compose
        # - Use kubectl for Kubernetes deployment
        # - Use Ansible playbook
        # - Use deployment service API

    - name: 🧪 Run smoke tests
      run: |
        echo "🧪 Running smoke tests against staging"
        # Add smoke tests here
        # curl -f https://staging.wakedock.example.com/health

  # Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, scan, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://wakedock.example.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup deployment
      run: |
        echo "API_IMAGE=${{ needs.build.outputs.api-image }}" >> $GITHUB_ENV
        echo "DASHBOARD_IMAGE=${{ needs.build.outputs.dashboard-image }}" >> $GITHUB_ENV

    - name: 📋 Generate deployment manifest
      run: |
        envsubst < docker-compose.prod.yml > docker-compose.production.yml
        cat docker-compose.production.yml

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment"
        echo "API Image: ${{ env.API_IMAGE }}"
        echo "Dashboard Image: ${{ env.DASHBOARD_IMAGE }}"
        # Here you would add your actual deployment commands

    - name: 🧪 Run production health checks
      run: |
        echo "🧪 Running production health checks"
        # Add production health checks here

  # Create GitHub Release
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [build, deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## 🚀 WakeDock Release ${{ github.ref_name }}
          
          ### 📦 Docker Images
          - API: `${{ needs.build.outputs.api-image }}`
          - Dashboard: `${{ needs.build.outputs.dashboard-image }}`
          
          ### 🔍 Security Scan Results
          - API Digest: `${{ needs.build.outputs.api-digest }}`
          - Dashboard Digest: `${{ needs.build.outputs.dashboard-digest }}`
          
          ### 📋 Changes
          See commit history for detailed changes.
          
          ### 🏗️ Deployment
          This release has been automatically deployed to production.
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [build, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 🧹 Clean up old images
      run: |
        echo "🧹 Cleaning up old container images"
        # Here you would add cleanup commands for old images
        # This could include calling GitHub API to delete old packages
