#!/usr/bin/env python3
"""
Script pour installer et tester toutes les d√©pendances WakeDock
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description=""):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîß {description}")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=Path(__file__).parent)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            if result.stdout:
                print(f"   Output: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - √âchec")
            if result.stderr:
                print(f"   Error: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exception: {e}")
        return False

def test_import(module_name, description=""):
    """Test l'import d'un module"""
    try:
        __import__(module_name)
        print(f"‚úÖ Import {module_name} - {description}")
        return True
    except ImportError as e:
        print(f"‚ùå Import {module_name} - {description}: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Import {module_name} - {description}: {e}")
        return False

def main():
    """Script principal"""
    print("üöÄ Installation et test des d√©pendances WakeDock")
    print("=" * 60)
    
    # 1. Installer depuis requirements.txt
    print("\nüì¶ Installation des d√©pendances...")
    if not run_command("pip install -r requirements.txt", "Installation requirements.txt"):
        print("‚ö†Ô∏è Installation partiellement √©chou√©e, continuons avec les tests...")
    
    # 2. Installer les packages probl√©matiques individuellement (optionnel)
    optional_packages = [
        "asyncpg==0.29.0",
        "psycopg2-binary==2.9.9"
    ]
    
    print("\nüîß Installation des packages optionnels...")
    for package in optional_packages:
        run_command(f"pip install {package}", f"Installation {package}")
    
    # 3. Ajouter src au PYTHONPATH pour les tests
    src_path = Path(__file__).parent / "src"
    if src_path.exists():
        sys.path.insert(0, str(src_path))
        print(f"\nüìÅ Ajout de {src_path} au PYTHONPATH")
    
    # 4. Test des imports essentiels
    print("\nüß™ Test des imports essentiels...")
    
    essential_imports = [
        ("fastapi", "Framework web FastAPI"),
        ("uvicorn", "Serveur ASGI"),
        ("pydantic", "Validation des donn√©es"),
        ("sqlalchemy", "ORM base de donn√©es"),
        ("jwt", "Gestion des tokens JWT"),
        ("passlib", "Hachage des mots de passe"),
        ("httpx", "Client HTTP async"),
        ("docker", "Client API Docker"),
        ("yaml", "Parsing YAML"),
        ("jinja2", "Moteur de templates"),
        ("validators", "Validation des donn√©es"),
        ("prometheus_client", "M√©triques Prometheus"),
        ("redis", "Client Redis"),
    ]
    
    success_count = 0
    for module, desc in essential_imports:
        if test_import(module, desc):
            success_count += 1
    
    print(f"\nüìä Imports essentiels: {success_count}/{len(essential_imports)} r√©ussis")
    
    # 5. Test des modules WakeDock
    print("\nüèóÔ∏è Test des modules WakeDock...")
    
    wakedock_modules = [
        ("wakedock.config", "Configuration"),
        ("wakedock.api.auth.jwt", "Authentification JWT"),
        ("wakedock.database.models", "Mod√®les de base de donn√©es"),
        ("wakedock.core.orchestrator", "Orchestrateur Docker"),
        ("wakedock.api.app", "Application FastAPI"),
    ]
    
    wakedock_success = 0
    for module, desc in wakedock_modules:
        if test_import(module, desc):
            wakedock_success += 1
    
    print(f"\nüìä Modules WakeDock: {wakedock_success}/{len(wakedock_modules)} r√©ussis")
    
    # 6. Test JWT sp√©cifique
    print("\nüîê Test de la fonctionnalit√© JWT...")
    try:
        from jwt.exceptions import DecodeError, InvalidTokenError
        print("‚úÖ Exceptions JWT import√©es correctement")
        
        from wakedock.api.auth.jwt import JWTManager
        jwt_manager = JWTManager()
        print("‚úÖ JWTManager instanci√© avec succ√®s")
        
        # Test de cr√©ation de token
        from wakedock.database.models import UserRole
        token = jwt_manager.create_access_token(1, "test", UserRole.USER)
        print("‚úÖ Token JWT cr√©√© avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Test JWT √©chou√©: {e}")
    
    # 7. R√©sum√© final
    total_success = success_count + wakedock_success
    total_tests = len(essential_imports) + len(wakedock_modules)
    
    print(f"\nüìà R√©sum√© final: {total_success}/{total_tests} tests r√©ussis")
    
    if total_success == total_tests:
        print("üéâ Toutes les d√©pendances sont install√©es et fonctionnelles!")
        print("‚úÖ WakeDock est pr√™t √† √™tre ex√©cut√©.")
        return 0
    elif total_success >= total_tests * 0.8:  # 80% de r√©ussite
        print("‚ö†Ô∏è La plupart des d√©pendances fonctionnent, WakeDock devrait pouvoir d√©marrer.")
        return 0
    else:
        print("‚ùå Trop d'imports ont √©chou√©, v√©rifiez les d√©pendances manquantes.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
