version: '3.8'

services:
  wakedock:
    image: wakedock:latest
    environment:
      - WAKEDOCK_CONFIG_PATH=/app/config/config.yml
      - WAKEDOCK_DATA_PATH=/app/data
      - WAKEDOCK_LOG_LEVEL=${WAKEDOCK_LOG_LEVEL}
      - WAKEDOCK_DEBUG=${WAKEDOCK_DEBUG}
      - CADDY_CONFIG_VOLUME_PATH=${CADDY_CONFIG_VOLUME}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock
      - ${WAKEDOCK_CONFIG_DIR}:/app/config
      - wakedock_data:/app/data
      - caddy_config_shared:/etc/caddy:z
    healthcheck:
      test: ["CMD", "python", "/app/health_check.py"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    depends_on:
      - postgres
      - redis
    networks:
      - wakedock_network
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  caddy:
    image: caddy:2-alpine
    ports:
      - "${CADDY_HTTP_PORT}:80"
      - "${CADDY_HTTPS_PORT}:443"
      - "${CADDY_ADMIN_PORT}:2019"
    volumes:
      - caddy_config_shared:/etc/caddy:z
      - ${CADDY_DATA_DIR}:/data
      - ${CADDY_CONFIG_DIR}:/config
      - ./caddy/Caddyfile.domains:/tmp/Caddyfile.domains:ro
    environment:
      - CADDY_AUTO_HTTPS=${CADDY_AUTO_HTTPS}
      - CADDY_ADMIN_API_ENABLED=${CADDY_ADMIN_API_ENABLED}
      - HOST_URL=${HOST_URL}
      - DASHBOARD_URL=${DASHBOARD_URL}
      - API_URL=${API_URL}
    user: "0:0"
    command: >
      sh -c "
        mkdir -p /etc/caddy
        echo 'Copying domain-based Caddyfile...'
        cp /tmp/Caddyfile.domains /etc/caddy/Caddyfile
        chmod 666 /etc/caddy/Caddyfile 2>/dev/null || true
        chmod 777 /etc/caddy 2>/dev/null || true
        echo 'Starting Caddy with domain configuration'
        caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
      "
    networks:
      - wakedock_network
    depends_on:
      - wakedock
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  dashboard:
    image: wakedock-dashboard:latest
    volumes:
      - ${DASHBOARD_DATA_DIR}:/app/data
    environment:
      - NODE_ENV=${NODE_ENV}
      - WAKEDOCK_API_URL=${WAKEDOCK_API_URL}
      - VITE_API_BASE_URL=/api/v1
      - PUBLIC_API_URL=${PUBLIC_API_URL}
      - PUBLIC_WS_URL=/ws
    networks:
      - wakedock_network
    depends_on:
      - wakedock
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - wakedock_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - wakedock_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

networks:
  wakedock_network:
    driver: overlay
    attachable: true

volumes:
  wakedock_data:
  postgres_data:
  redis_data:
  caddy_config_shared:
  caddy_data:
  caddy_config:
  dashboard_data:
