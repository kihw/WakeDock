# Performance-optimized Docker Compose configuration
version: '3.8'

services:
  wakedock:
    build:
      context: .
      dockerfile: Dockerfile.performance
      args:
        - POETRY_VERSION=1.6.1

    # Resource limits and reservations
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Performance environment variables
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - WEB_CONCURRENCY=4
      - WORKER_CLASS=uvicorn.workers.UvicornWorker
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
      - PRELOAD_APP=true

    # Optimized logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

    # Health check with proper timing
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - wakedock-net

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.performance

    # Resource optimization
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    # Optimized logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
        compress: "true"

    # Health check
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

    networks:
      - wakedock-net

    depends_on:
      - wakedock

  postgres:
    image: postgres:15-alpine

    # PostgreSQL performance optimizations
    environment:
      - POSTGRES_DB=wakedock
      - POSTGRES_USER=wakedock
      - POSTGRES_PASSWORD=wakedock_secure_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

    # Optimized PostgreSQL configuration
    command: >
      postgres -c shared_preload_libraries=pg_stat_statements -c max_connections=200 -c shared_buffers=256MB -c effective_cache_size=1GB -c maintenance_work_mem=64MB -c checkpoint_completion_target=0.9 -c wal_buffers=16MB -c default_statistics_target=100 -c random_page_cost=1.1 -c effective_io_concurrency=200 -c work_mem=4MB -c min_wal_size=1GB -c max_wal_size=4GB -c max_worker_processes=8 -c max_parallel_workers_per_gather=4 -c max_parallel_workers=8 -c max_parallel_maintenance_workers=4

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

    # Optimized volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # tmpfs for temporary operations
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M

    # Health check
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U wakedock" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

    # Optimized logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

    networks:
      - wakedock-net

  redis:
    image: redis:7-alpine

    # Redis performance configuration
    command: >
      redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000 --tcp-keepalive 60 --timeout 300 --tcp-backlog 511 --databases 16 --stop-writes-on-bgsave-error no --rdbcompression yes --rdbchecksum yes

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

    # Health check
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    # Optimized logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
        compress: "true"

    # Network optimizations
    sysctls:
      - net.core.somaxconn=65535

    networks:
      - wakedock-net

    volumes:
      - redis_data:/data

  caddy:
    image: caddy:2-alpine

    # Resource optimization
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

    # Performance environment variables
    environment:
      - CADDY_ADMIN=0.0.0.0:2019

    # Optimized volumes with tmpfs cache
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
      - type: tmpfs
        target: /tmp/caddy_cache
        tmpfs:
          size: 100M

    # Health check
    healthcheck:
      test: [ "CMD", "caddy", "version" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    # Optimized logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
        compress: "true"

    networks:
      - wakedock-net

    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"

# Optimized network configuration
networks:
  wakedock-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.mtu: "1500"

# Optimized volume configuration
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data/redis

  caddy_data:
    driver: local

  caddy_config:
    driver: local
