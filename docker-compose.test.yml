services:
  # Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: wakedock-test-postgres
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${TEST_POSTGRES_DB}
      - POSTGRES_USER=${TEST_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - ${TEST_POSTGRES_DATA_DIR}:/var/lib/postgresql/data
    ports:
      - "${TEST_POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${TEST_POSTGRES_USER} -d ${TEST_POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - ${TEST_NETWORK}

  # Test Redis
  redis-test:
    image: redis:7-alpine
    container_name: wakedock-test-redis
    env_file:
      - .env
    command: >
      redis-server --appendonly no --save "" --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "${TEST_REDIS_PORT}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - ${TEST_NETWORK}

  # WakeDock Test API
  wakedock-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: wakedock-test-api
    env_file:
      - .env
    environment:
      - ENV=test
      - HOST=0.0.0.0
      - PORT=${TEST_API_PORT}
      - DATABASE_URL=postgresql://${TEST_POSTGRES_USER}:${TEST_POSTGRES_PASSWORD}@postgres-test:5432/${TEST_POSTGRES_DB}
      - REDIS_URL=redis://redis-test:6379/0
      - JWT_SECRET_KEY=${TEST_JWT_SECRET_KEY}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - CADDY_ADMIN_ENDPOINT=http://caddy-test:2019
      - PYTHONPATH=/app
      - PYTEST_CURRENT_TEST=1
    volumes:
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock:ro
      - .:/app
      - ${TEST_DATA_DIR}:/app/data
    ports:
      - "${TEST_API_PORT}:${TEST_API_PORT}"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for dependencies...' &&
        python -m pytest tests/ -v --cov=src/wakedock --cov-report=html --cov-report=term
      "
    networks:
      - ${TEST_NETWORK}

  # Test Caddy
  caddy-test:
    image: caddy:2-alpine
    container_name: wakedock-test-caddy
    env_file:
      - .env
    environment:
      - DOMAIN=${TEST_DOMAIN}
      - API_UPSTREAM=wakedock-test:${TEST_API_PORT}
    volumes:
      - ./caddy/Caddyfile.test:/etc/caddy/Caddyfile:ro
    ports:
      - "${TEST_CADDY_HTTP_PORT}:80"
      - "${TEST_CADDY_ADMIN_PORT}:2019"
    networks:
      - ${TEST_NETWORK}

  # Test Runner (separate container for running tests)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: wakedock-test-runner
    env_file:
      - .env
    environment:
      - ENV=test
      - DATABASE_URL=postgresql://${TEST_POSTGRES_USER}:${TEST_POSTGRES_PASSWORD}@postgres-test:5432/${TEST_POSTGRES_DB}
      - REDIS_URL=redis://redis-test:6379/0
      - JWT_SECRET_KEY=${TEST_JWT_SECRET_KEY}
      - PYTHONPATH=/app
    volumes:
      - .:/app
      - ${TEST_COVERAGE_DIR}:/app/htmlcov
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - ${TEST_NETWORK}
    profiles:
      - test

volumes:
  postgres_test_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${TEST_POSTGRES_DATA_DIR}

  test_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${TEST_DATA_DIR}

  test_coverage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${TEST_COVERAGE_DIR}

networks:
  wakedock-test-network:
    name: ${TEST_NETWORK}
    external: true
