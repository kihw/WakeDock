version: '3.8'

services:
  # Dashboard development server
  dashboard-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: wakedock-dashboard-dev
    ports:
      - "${DEV_PORT:-3000}:5173" # Vite dev server port
      - "${DEV_HMR_PORT:-24678}:24678" # HMR port
    environment:
      - NODE_ENV=development
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8000}
      - PUBLIC_WS_URL=${PUBLIC_WS_URL:-ws://localhost:8000/ws}
      - PUBLIC_ENABLE_DEBUG=true
      - VITE_HMR_PORT=24678
      - CHOKIDAR_USEPOLLING=true # For file watching in containers
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/node_modules # Anonymous volume for node_modules
      - dashboard-dev-logs:/app/logs
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    stdin_open: true
    tty: true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5173" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "wakedock.service=dashboard-dev"
      - "wakedock.environment=development"

  # Mock API server for development
  api-mock:
    image: mockserver/mockserver:latest
    container_name: wakedock-api-mock
    ports:
      - "${MOCK_API_PORT:-8000}:1080"
    environment:
      - MOCKSERVER_PROPERTY_FILE=/config/mockserver.properties
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/expectations.json
    volumes:
      - ./dev/mock-api:/config:ro
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - mock
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:1080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for development
  redis-dev:
    image: redis:7-alpine
    container_name: wakedock-redis-dev
    ports:
      - "${REDIS_DEV_PORT:-6380}:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - cache
    command: redis-server --appendonly yes

  # PostgreSQL for development
  postgres-dev:
    image: postgres:15-alpine
    container_name: wakedock-postgres-dev
    ports:
      - "${POSTGRES_DEV_PORT:-5433}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DEV_DB:-wakedock_dev}
      - POSTGRES_USER=${POSTGRES_DEV_USER:-wakedock}
      - POSTGRES_PASSWORD=${POSTGRES_DEV_PASSWORD:-password}
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./dev/sample-data.sql:/docker-entrypoint-initdb.d/sample-data.sql:ro
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - database

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: wakedock-mailhog
    ports:
      - "${MAILHOG_WEB_PORT:-8025}:8025" # Web interface
      - "${MAILHOG_SMTP_PORT:-1025}:1025" # SMTP server
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - email

  # Minio for S3-compatible storage testing
  minio:
    image: minio/minio:latest
    container_name: wakedock-minio
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio-data:/data
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - storage
    command: server /data --console-address ":9001"

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: wakedock-adminer
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - database-admin
    environment:
      - ADMINER_DEFAULT_SERVER=postgres-dev

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: wakedock-redis-commander
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - cache-admin
    depends_on:
      - redis-dev

  # Test runner container
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: wakedock-test-runner
    environment:
      - NODE_ENV=test
      - PUBLIC_API_URL=http://api-mock:1080
    volumes:
      - .:/app
      - /app/node_modules
      - test-results:/app/test-results
      - coverage-results:/app/coverage
    networks:
      - wakedock-dev-network
    profiles:
      - test
    command: npm run test:watch

  # Storybook for component development
  storybook:
    build:
      context: .
      dockerfile: Dockerfile.storybook
    container_name: wakedock-storybook
    ports:
      - "${STORYBOOK_PORT:-6006}:6006"
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - wakedock-dev-network
    restart: unless-stopped
    profiles:
      - storybook

# Development network
networks:
  wakedock-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Development volumes
volumes:
  dashboard-dev-logs:
    driver: local

  postgres-dev-data:
    driver: local

  redis-dev-data:
    driver: local

  minio-data:
    driver: local

  test-results:
    driver: local

  coverage-results:
    driver: local
