# Multi-stage optimized Dockerfile for WakeDock Backend
FROM python:3.11-slim as base

# Build arguments
ARG POETRY_VERSION=1.6.1
ARG PYTHONUNBUFFERED=1
ARG PYTHONDONTWRITEBYTECODE=1

# System optimizations
RUN apt-get update && apt-get install -y \
    # Essential dependencies only
    gcc \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Stage: Dependencies
FROM base as dependencies

# Install Poetry
RUN pip install --no-cache-dir poetry==$POETRY_VERSION

# Poetry configuration for performance
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

WORKDIR /app

# Copy dependency files first (better Docker layer caching)
COPY pyproject.toml poetry.lock ./

# Install dependencies with cache optimization
RUN poetry install --only=main --no-root && rm -rf $POETRY_CACHE_DIR

# Stage: Application
FROM base as application

# Copy virtual environment from dependencies stage
COPY --from=dependencies /app/.venv /app/.venv

# Configure PATH
ENV PATH="/app/.venv/bin:$PATH"

WORKDIR /app

# Copy application code
COPY src/ src/
COPY alembic/ alembic/
COPY alembic.ini .

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash wakedock
USER wakedock

# Health check optimized
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/health', timeout=5)"

# Expose port
EXPOSE 8000

# Optimized startup command
CMD ["uvicorn", "wakedock.main:app", \
    "--host", "0.0.0.0", \
    "--port", "8000", \
    "--workers", "4", \
    "--worker-class", "uvicorn.workers.UvicornWorker"]
