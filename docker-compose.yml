services:
  wakedock:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wakedock-core
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    ports:
      - "${WAKEDOCK_CORE_PORT}:8000"
    volumes:
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock
      - ${WAKEDOCK_CONFIG_DIR}:/app/config
      - ${WAKEDOCK_CORE_DATA}:/app/data
      - ${WAKEDOCK_LOGS_DIR}:/app/logs
    environment:
      - WAKEDOCK_CONFIG_PATH=/app/config/config.yml
      - WAKEDOCK_DATA_PATH=/app/data
      - WAKEDOCK_LOG_LEVEL=${WAKEDOCK_LOG_LEVEL}
      - WAKEDOCK_DEBUG=${WAKEDOCK_DEBUG}
      - CADDY_CONFIG_VOLUME_PATH=${CADDY_CONFIG_VOLUME}
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ${WAKEDOCK_NETWORK}

  caddy:
    image: caddy:2-alpine
    container_name: wakedock-caddy
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    ports:
      - "${CADDY_HTTP_PORT}:80"
      - "${CADDY_HTTPS_PORT}:443"
      - "${CADDY_ADMIN_PORT}:2019" # Admin API
    volumes:
      - ${CADDY_CONFIG_VOLUME}:/etc/caddy
      - ${CADDY_DATA_DIR}:/data
      - ${CADDY_CONFIG_DIR}:/config
    environment:
      - CADDY_AUTO_HTTPS=${CADDY_AUTO_HTTPS}
      - CADDY_ADMIN_API_ENABLED=${CADDY_ADMIN_API_ENABLED}
    networks:
      - ${WAKEDOCK_NETWORK}
    depends_on:
      wakedock:
        condition: service_healthy

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: wakedock-dashboard
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    ports:
      - "${DASHBOARD_PORT}:3000"
    volumes:
      - ${DASHBOARD_DATA_DIR}:/app/data
    environment:
      - NODE_ENV=${NODE_ENV}
      - WAKEDOCK_API_URL=${WAKEDOCK_API_URL}
    networks:
      - ${WAKEDOCK_NETWORK}
    depends_on:
      - wakedock

networks:
  caddy_net:
    name: ${WAKEDOCK_NETWORK}
    external: true

volumes:
  wakedock_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${WAKEDOCK_CORE_DATA}

  caddy_config_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_CONFIG_VOLUME}

  caddy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_DATA_DIR}

  caddy_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_CONFIG_DIR}

  dashboard_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DASHBOARD_DATA_DIR}
