services:
  wakedock:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wakedock-core
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    ports:
      - "${WAKEDOCK_CORE_PORT}:8000"
    volumes:
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock
      - ${WAKEDOCK_CONFIG_DIR}:/app/config
      - wakedock_data:/app/data
      - caddy_config_shared:/etc/caddy
    environment:
      - WAKEDOCK_CONFIG_PATH=/app/config/config.yml
      - WAKEDOCK_DATA_PATH=/app/data
      - WAKEDOCK_LOG_LEVEL=${WAKEDOCK_LOG_LEVEL}
      - WAKEDOCK_DEBUG=${WAKEDOCK_DEBUG}
      - CADDY_CONFIG_VOLUME_PATH=${CADDY_CONFIG_VOLUME}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    healthcheck:
      test: [ "CMD", "python", "/app/health_check.py" ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ${WAKEDOCK_NETWORK}

  caddy:
    image: caddy:2-alpine
    container_name: wakedock-caddy
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    ports:
      - "${CADDY_HTTP_PORT}:80"
      - "${CADDY_HTTPS_PORT}:443"
      - "${CADDY_ADMIN_PORT}:2019" # Admin API
    volumes:
      - caddy_config_shared:/etc/caddy
      - ${CADDY_DATA_DIR}:/data
      - ${CADDY_CONFIG_DIR}:/config
      - ./caddy/Caddyfile.default:/tmp/Caddyfile.default:ro
    environment:
      - CADDY_AUTO_HTTPS=${CADDY_AUTO_HTTPS}
      - CADDY_ADMIN_API_ENABLED=${CADDY_ADMIN_API_ENABLED}
    command: >
      sh -c "
        echo 'Initializing WakeDock Caddyfile...'
        cp /tmp/Caddyfile.default /etc/caddy/Caddyfile
        echo 'WakeDock Caddyfile installed successfully'
        caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
      "
    networks:
      - ${WAKEDOCK_NETWORK}
    depends_on:
      wakedock:
        condition: service_healthy

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: wakedock-dashboard
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    ports:
      - "${DASHBOARD_PORT}:3000"
    volumes:
      - ${DASHBOARD_DATA_DIR}:/app/data
    environment:
      - NODE_ENV=${NODE_ENV}
      - WAKEDOCK_API_URL=${WAKEDOCK_API_URL}
    networks:
      - ${WAKEDOCK_NETWORK}
    depends_on:
      - wakedock

  # PostgreSQL database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: wakedock-postgres
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - ${WAKEDOCK_NETWORK}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: wakedock-redis
    restart: ${RESTART_POLICY}
    env_file:
      - .env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - ${WAKEDOCK_NETWORK}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  caddy_net:
    name: ${WAKEDOCK_NETWORK}
    external: true

volumes:
  wakedock_data:
    driver: local

  postgres_data:
    driver: local

  redis_data:
    driver: local

  caddy_config_shared:
    driver: local

  caddy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_DATA_DIR}

  caddy_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CADDY_CONFIG_DIR}

  dashboard_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DASHBOARD_DATA_DIR}
